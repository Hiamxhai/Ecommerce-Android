//tach chuoi mp3

fun TachCach1(path:String):String {

    var arr = path.split("/")
    return arr[arr.size-1]
}
fun TachCach2(path: String):String
{
    var vt = path.lastIndexOf("/")
    return path.substring(vt+1)
}
fun  TachCach3(path: String):String {
    var vt1 = path.lastIndexOf("/")
    var vt2 = path.lastIndexOf(".")
    return path.substring(vt1 + 1, vt2)
}
fun main() {
    var path = "d:/nhac/nhacsen/longme.mp3"
    var ten1 = TachCach1(path)
    println(ten1)
    var ten2 =TachCach2(path)
    println(ten2)
    var ten3 = TachCach3(path)
    println(ten3)
}
// kiem tra poly
fun kiemTraPanlyDrome(s:String):Boolean {
    for (i in s.indices) {

        if (s[i]!= s[s.length-i-1])
            return false
    }
    return true
}
fun main() {
    var s = "radar"
    var kt = kiemTraPanlyDrome(s)
    if(kt) {
        println("$s la chuoi palynrome")
    }
    else {
        println("$s ko la chuoi panlyrome")
    }
}

//Toi uu ten
fun ToiUu(s: String): String {

    var sTam = s.trim()
    var dsWord = sTam.split(" ")
    var sToiUu=""
    for (word in dsWord) {
        if (word.length > 0) {
            var wordMoi = word.toLowerCase()
            wordMoi = wordMoi.replaceFirst(wordMoi[0]+ "",
                (wordMoi[0]+"").toUpperCase())
            sToiUu+= wordMoi+" "
        }
    }
    return sToiUu.trim()
}
fun main() {
    var ten = "   Vũ sƠn HảI  "
    var ten2 =ToiUu(ten)
    println(ten2)
}

//xu li mang 2 chieu 
import java.util.*

fun main() {
    var M:Array<IntArray> = Array(10,{ IntArray(5) })
    var ran = Random()
    for (i in M.indices) {
        for (j in M[i].indices) {
            M[i][j] = ran.nextInt(100)
        }
    }
    println("Mang 2 chieu")
    for (i in M.indices) {
        for (j in M[i].indices) {
            print("${M[i][j]}\t")
        }
        println()
    }

}

//Colection 
import java.util.*

fun main() {
    var ds:MutableList<Int> = mutableListOf()
    ds.add(5)
    ds.add(10)
    ds.add(8)
    ds.addAll(mutableListOf(1,2,4,7))
    for (item in ds)
        print("$item\t")
    ds.sort()
    println("\nSap xep tang dan:")
    for (item in ds)
        print("$item\t")
    ds.sortDescending()
    ds.removeAt(2)
    println("\n sap xep giam dan")
    for (item in ds)
        print("$item\t")
    var dsLe = ds.filter { x -> x % 2 == 1 }
    println("Cac so le la")
    for (item in dsLe)
        print("$item\t")
    println("Sau khi chen 9")
    ds.add(3,9) // chen vao vi tri 3 co gia tri bang 9
    for (item in ds)
        print("$item \t")
    ds[1] = 88 // sua vi tri so 1
    println("Sau khi sua 8 thanh 88")
    for (item in ds)
        print("$item \t")
}

//bai tap mang
import java.util.*

fun main() {
    var n:Int?
    println("Nhap so phan tu cua mang")
    n = readLine()?.toInt()

    if (n == null) return

    var M: IntArray = kotlin.IntArray(10)

    var random = Random()
    for (i in M.indices)
        M[i] = random.nextInt(100)
        println("Ds cac phan tu trong mang")
    for (item in M)
        print("$item\t")
    //tinh tong mang
    var sum = M.sum()
    println("\n$ Tong mang : ${sum}")
    println("Nhap k :")
    var k:Int? = readLine()?.toInt()
    if (k == null) return
    var dem = 0
        for (item in M ) {
            if (item == k)
                dem++
        }
    println("So $k xuat hien $dem lan ")
    // tim phan tu lon nhat nho nhat
 //   println("phan tu lonh hat = ${M.max()}")
//    println("phan tu nho nhat = ${M.min()}")

    var dsNguyenTo = M.filter { x ->
        var dem = 0
        for (i in 1..x) {
            if (x % i == 0)
                dem ++
        }
         dem == 2
    }
    println("Cac so nguyen to : ")
    for (item in dsNguyenTo)
        print("$item\t")
    M.sort()
     println("\nmang tang dan")
        for (item in M)
        print("$item\t")
    M.sortDescending()
      println("\nmang giam dan")
        for (item in M)
        print("$item\t")

}
//colletion
import java.util.*

fun main() {
    var ds:MutableList<Int> = mutableListOf()
    while (true) {
        println("Nhập giá trị : ")
        var x:Int? = readLine()?.toInt()
        if (x == null) continue
        ds.add(x)
        println("Tiếp không(c/k) :")
        var hoi = readLine()
       if(hoi?.equals("k",true) == true) {
           break
       }
    }
    println("Colletion sau khi nhập là :")
    for (item in ds)
        print("$item\t")

    println("\nBạn muốn sửa ở vị trí nào :")
        var vt = readLine()?.toInt()
        if (vt!= null)
            if (vt >= 0 && vt < ds.size) {
                println("Mời bạn nhập giá trị mới:")
            var gt = readLine()?.toInt()
                if (gt!= null)
                    ds[vt] = gt
    }
    println("Colletion sau khi sửa là :")
        for (item in ds)
        print("$item\t")

    println("\nBạn muốn xóa vị trí nào : ")
    var vtXoa = readLine()?.toInt()
        if (vtXoa != null && vtXoa >= 0 && vtXoa < ds.size) {
            ds.removeAt(vtXoa)
    }
    println("Collection sau khi xóa là")
        for (item in ds)
        print("$item\t")

    println("\nBạn muốn tìm số nào :")
    var soTim = readLine()?.toInt()
    if (soTim != null) {
        var kq = ds.filter { x -> x == soTim }
        if (kq.size > 0)
            println("tìm thấy $soTim !")
        else
            println("Không tìm thấy $soTim !")
    }

    ds.sort()
    println("Colletion sau khi tăng dần")
        for (item in ds)
            print("$item\t")
    println("Collection sau khi giảm dần")
    ds.sortDescending()
        for (item in ds)
            print("$item\t")

}
